# -*- coding: utf-8 -*-
"""Bigdata_project_music.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11kYp-beTGqi0rRM_xNjKKtsB4uaMo85Y

Initially we need to install the boto3 into the python.Boto3 is the AWS SDK which is used for the python programming language to intract with the AWS DynamoDB
"""

pip install boto3

pip install dynamodb-json

pip install requests

import boto3
import time 
import uuid 
from datetime import datetime  
from dynamodb_json import json_util as json 
from __future__ import print_function
import json
import decimal
import timeit
import requests
from google.colab import drive
from boto3.dynamodb.conditions import Key, Attr

AWS_ACCESS = ""
AWS_SECRET = ""
AWS_REGION = "us-east-2"
TABLE_NAME = "Applemusic"

"""Above are the variables used for the configuration of the Accesskey,Secret access key id are required to access the particular account and aws_region is used to access the particular region(which is nearest)"""

dynamodb_client = boto3.client('dynamodb',aws_secret_access_key=AWS_SECRET,aws_access_key_id=AWS_ACCESS,region_name=AWS_REGION)

"""Above query is to connect with the AWS DynamoDb console using the aws configuration mentioned in the above variables

Above query is used for creating the table name "applemusic" with the partition key as year and sort key as title.Key type and the attribute type are mentioned.For the partition key the key type is HASH and for the sort key the key type is RANGE.
"""

drive.mount("/content/drive")

"""
I coonected with my google drive where I stored the json file which I downloaded from the github"""

amusic="/content/drive/My Drive/applemusic.json"
print(amusic)

#Inserting bulk data into the table
count=0
dynamodb = boto3.resource('dynamodb', region_name='us-east-2',aws_secret_access_key=AWS_SECRET,aws_access_key_id=AWS_ACCESS)
table = dynamodb.Table('Applemusic')

with open(amusic) as json_file:
    amus = json.load(json_file, parse_float = decimal.Decimal)
    res=amus['results']
    k=res[0].keys()
    print(k)

start = time.time()
with open(amusic) as json_file:
    amus = json.load(json_file, parse_float = decimal.Decimal)
    res=amus['results']
  
    for m in res:
      cId = int(m['collectionId'])
      artistN = m['artistName']
      wrapperT = m['wrapperType']   
      collectionName=m['collectionName']
      collectionCensoredName=m['collectionCensoredName']
      artistViewUrl=['artistViewUrl']
      collectionViewUrl=m['collectionViewUrl']
      artworkUrl60=m['artworkUrl60']
      artworkUrl100=m['artworkUrl100']
      collectionPrice=m['collectionPrice']
      releaseDate=m['releaseDate']
      collectionExplicitness=m['collectionExplicitness']
      trackCount=m['trackCount']
      country=m['country']
      currency=m['currency']
      primaryGenreName=m['primaryGenreName']


      print("Adding data:", cId,artistN,artistViewUrl,artworkUrl100,artworkUrl60,collectionCensoredName,collectionExplicitness,collectionName,collectionPrice,collectionViewUrl,country,currency,k,primaryGenreName,releaseDate,trackCount)

      table.put_item(Item={'collectionId': cId,'artistName': artistN,})


end = time.time()
print(end - start)

"""Above query is used for loading the json file from the location and adding the items in bulk into the table using the put item. I am adding year, title and the info items into the table from the json file. I have used time for calculating the query start time and the query end time just to make sure to keep a track of the time taken"""

#Putting Single Item into the table using PutItem
start = time.time()
cId = 56187534
artistN = "Ariana Grande"
trackN = "Masked Chritmas"

response = table.put_item(
   Item={
        'collectionId': cId,
        'artistName': artistN,
        'trackName': trackN
        }
)

end = time.time()
print(end - start)
print(response)

#scan
start = time.time()

response = table.scan()
data = response['Items']

while 'collectionId' in response:
    response = table.scan(ExclusiveStartKey=response['collectionId'])
    data.extend(response['Items'])

print(response)

end = time.time()
print(end - start)

#Getting Single Item from the table using GetItem
start = time.time()
cId = 352834343
artistN = "Big Rich & Ya Boy"


try:
    response = table.get_item(
        Key={
            'collectionId': cId,
            'artistName': artistN
        }
    )

except (ClientError, KeyError) as e:
        print_(e)

print(response)
end = time.time()
print(end - start)

start = time.time()
response = table.query(
    KeyConditionExpression=Key('collectionId').eq(7383010)
)
print(response)
for i in response['Items']:
    print(i['collectionId'], ":", i['artistName'])
end = time.time()
print(end - start)

#filter
start = time.time()
response = table.scan(FilterExpression=Attr('artistName').contains('Big'))

print(response)
end = time.time()
print(end - start)

#filter
start = time.time()
response = table.scan(FilterExpression=Attr('releaseDate').gte("1999-11-23"))
print(response)
for i in response['Items']:
    print(i['collectionId'], ":", i['artistName'])
end = time.time()
print(end - start)

#filter
start = time.time()
response = table.scan(FilterExpression=Attr('artistName').begins_with('B'))
print(response)
end = time.time()
print(end - start)

"""For FilterExpression we use Attr and the above query is used for filtering the table with the Artist Name begins with 'B' in their value."""